
test03-intr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000374  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800110  00800110  00000418  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba5  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d0  00000000  00000000  00001091  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f9  00000000  00000000  00001a61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000483  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040a  00000000  00000000  00002513  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000291d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c1       	rjmp	.+632    	; 0x28e <__vector_5>
  16:	00 00       	nop
  18:	5b c1       	rjmp	.+694    	; 0x2d0 <__vector_6>
  1a:	00 00       	nop
  1c:	70 c1       	rjmp	.+736    	; 0x2fe <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e7       	ldi	r30, 0x74	; 116
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 31       	cpi	r26, 0x1B	; 27
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ad d0       	rcall	.+346    	; 0x21e <main>
  c4:	55 c1       	rjmp	.+682    	; 0x370 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <seg>:
uint8_t digit[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67, 0x77, 0x7C, 0x58, 0x5E, 0x79, 0x71};
char arr[5]; //

void seg(int sel, uint8_t c)
{
	PORTC |= 0x0F;
  c8:	25 b3       	in	r18, 0x15	; 21
  ca:	2f 60       	ori	r18, 0x0F	; 15
  cc:	25 bb       	out	0x15, r18	; 21
	PORTC &= ~(1 <<(3-sel));
  ce:	25 b3       	in	r18, 0x15	; 21
  d0:	43 e0       	ldi	r20, 0x03	; 3
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	48 1b       	sub	r20, r24
  d6:	59 0b       	sbc	r21, r25
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <seg+0x1a>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	4a 95       	dec	r20
  e4:	e2 f7       	brpl	.-8      	; 0xde <seg+0x16>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	85 bb       	out	0x15, r24	; 21
	PORTD = c;  // 숫자 데이터 출력
  ec:	62 bb       	out	0x12, r22	; 18
  ee:	08 95       	ret

000000f0 <FND_4>:
	//_delay_ms(100);
}

//int sm = 4;
void FND_4(char *inf)//segment image 배열
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	8c 01       	movw	r16, r24
	for(int i=0; i<4; i++)
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	0d c0       	rjmp	.+26     	; 0x11a <FND_4+0x2a>
	{
		seg(i, *(inf+i));  // = seg(i, inf[i]);
 100:	f8 01       	movw	r30, r16
 102:	ec 0f       	add	r30, r28
 104:	fd 1f       	adc	r31, r29
 106:	60 81       	ld	r22, Z
 108:	ce 01       	movw	r24, r28
 10a:	de df       	rcall	.-68     	; 0xc8 <seg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	8f e1       	ldi	r24, 0x1F	; 31
 10e:	9e e4       	ldi	r25, 0x4E	; 78
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <FND_4+0x20>
 114:	00 c0       	rjmp	.+0      	; 0x116 <FND_4+0x26>
 116:	00 00       	nop
}

//int sm = 4;
void FND_4(char *inf)//segment image 배열
{
	for(int i=0; i<4; i++)
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	c4 30       	cpi	r28, 0x04	; 4
 11c:	d1 05       	cpc	r29, r1
 11e:	84 f3       	brlt	.-32     	; 0x100 <FND_4+0x10>
	{
		seg(i, *(inf+i));  // = seg(i, inf[i]);
		_delay_ms(5);
	}
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	08 95       	ret

0000012a <Disp>:

char* Disp(unsigned long num) // 10진 정수
{
 12a:	4f 92       	push	r4
 12c:	5f 92       	push	r5
 12e:	6f 92       	push	r6
 130:	7f 92       	push	r7
 132:	8f 92       	push	r8
 134:	9f 92       	push	r9
 136:	af 92       	push	r10
 138:	bf 92       	push	r11
 13a:	cf 92       	push	r12
 13c:	df 92       	push	r13
 13e:	ef 92       	push	r14
 140:	ff 92       	push	r15
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	28 97       	sbiw	r28, 0x08	; 8
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
 156:	4b 01       	movw	r8, r22
 158:	5c 01       	movw	r10, r24
	int n1 = num % 10;         //A 
 15a:	0f 2e       	mov	r0, r31
 15c:	fa e0       	ldi	r31, 0x0A	; 10
 15e:	cf 2e       	mov	r12, r31
 160:	d1 2c       	mov	r13, r1
 162:	e1 2c       	mov	r14, r1
 164:	f1 2c       	mov	r15, r1
 166:	f0 2d       	mov	r31, r0
 168:	a7 01       	movw	r20, r14
 16a:	96 01       	movw	r18, r12
 16c:	df d0       	rcall	.+446    	; 0x32c <__udivmodsi4>
 16e:	2b 01       	movw	r4, r22
 170:	3c 01       	movw	r6, r24
	int n2 = (num/10) % 10;    //B 
 172:	ca 01       	movw	r24, r20
 174:	b9 01       	movw	r22, r18
 176:	a7 01       	movw	r20, r14
 178:	96 01       	movw	r18, r12
 17a:	d8 d0       	rcall	.+432    	; 0x32c <__udivmodsi4>
 17c:	69 83       	std	Y+1, r22	; 0x01
 17e:	7a 83       	std	Y+2, r23	; 0x02
 180:	8b 83       	std	Y+3, r24	; 0x03
 182:	9c 83       	std	Y+4, r25	; 0x04
	int n3 = (num/100) % 10;   //C 
 184:	c5 01       	movw	r24, r10
 186:	b4 01       	movw	r22, r8
 188:	24 e6       	ldi	r18, 0x64	; 100
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	cd d0       	rcall	.+410    	; 0x32c <__udivmodsi4>
 192:	ca 01       	movw	r24, r20
 194:	b9 01       	movw	r22, r18
 196:	a7 01       	movw	r20, r14
 198:	96 01       	movw	r18, r12
 19a:	c8 d0       	rcall	.+400    	; 0x32c <__udivmodsi4>
 19c:	6d 83       	std	Y+5, r22	; 0x05
 19e:	7e 83       	std	Y+6, r23	; 0x06
 1a0:	8f 83       	std	Y+7, r24	; 0x07
 1a2:	98 87       	std	Y+8, r25	; 0x08
	int n4 = (num/1000) % 10;  //D 
 1a4:	c5 01       	movw	r24, r10
 1a6:	b4 01       	movw	r22, r8
 1a8:	28 ee       	ldi	r18, 0xE8	; 232
 1aa:	33 e0       	ldi	r19, 0x03	; 3
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	bd d0       	rcall	.+378    	; 0x32c <__udivmodsi4>
 1b2:	ca 01       	movw	r24, r20
 1b4:	b9 01       	movw	r22, r18
 1b6:	a7 01       	movw	r20, r14
 1b8:	96 01       	movw	r18, r12
 1ba:	b8 d0       	rcall	.+368    	; 0x32c <__udivmodsi4>
	arr[0] = digit[n1];
 1bc:	f2 01       	movw	r30, r4
 1be:	e0 50       	subi	r30, 0x00	; 0
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	20 81       	ld	r18, Z
 1c4:	e6 e1       	ldi	r30, 0x16	; 22
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	20 83       	st	Z, r18
	arr[1] = digit[n2];
 1ca:	a9 81       	ldd	r26, Y+1	; 0x01
 1cc:	ba 81       	ldd	r27, Y+2	; 0x02
 1ce:	a0 50       	subi	r26, 0x00	; 0
 1d0:	bf 4f       	sbci	r27, 0xFF	; 255
 1d2:	2c 91       	ld	r18, X
 1d4:	21 83       	std	Z+1, r18	; 0x01
	arr[2] = digit[n3];
 1d6:	ad 81       	ldd	r26, Y+5	; 0x05
 1d8:	be 81       	ldd	r27, Y+6	; 0x06
 1da:	a0 50       	subi	r26, 0x00	; 0
 1dc:	bf 4f       	sbci	r27, 0xFF	; 255
 1de:	2c 91       	ld	r18, X
 1e0:	22 83       	std	Z+2, r18	; 0x02
	arr[3] = digit[n4];
 1e2:	db 01       	movw	r26, r22
 1e4:	a0 50       	subi	r26, 0x00	; 0
 1e6:	bf 4f       	sbci	r27, 0xFF	; 255
 1e8:	8c 91       	ld	r24, X
	//sm = (num > 4095) ? 4:(num > 256) ? 3:(num > 16) ? 2 : 1;
	FND_4(arr);
 1ea:	83 83       	std	Z+3, r24	; 0x03
 1ec:	cf 01       	movw	r24, r30
 1ee:	80 df       	rcall	.-256    	; 0xf0 <FND_4>
	return arr;
}
 1f0:	86 e1       	ldi	r24, 0x16	; 22
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	28 96       	adiw	r28, 0x08	; 8
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	df 90       	pop	r13
 20a:	cf 90       	pop	r12
 20c:	bf 90       	pop	r11
 20e:	af 90       	pop	r10
 210:	9f 90       	pop	r9
 212:	8f 90       	pop	r8
 214:	7f 90       	pop	r7
 216:	6f 90       	pop	r6
 218:	5f 90       	pop	r5
 21a:	4f 90       	pop	r4
 21c:	08 95       	ret

0000021e <main>:
	// 7-Segment 사용 : 4Module ~ C type
	// Pin assign : PAx - Segment img, PBx -module sel
	// Interrupt 사용 : INT4 ~ INT6 (Ext Int)
	// Pin assign : PE4 ~ PE6
	
	DDRD = 0xFF;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0F;
 222:	8f e0       	ldi	r24, 0x0F	; 15
 224:	84 bb       	out	0x14, r24	; 20
	DDRE = 0x00;
 226:	12 b8       	out	0x02, r1	; 2
	DDRA = 0x01;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	8a bb       	out	0x1a, r24	; 26
	
	// 인터럽트 설정
	EIMSK = 0x70; // 0111 0000b
 22c:	80 e7       	ldi	r24, 0x70	; 112
 22e:	89 bf       	out	0x39, r24	; 57
	EICRB = 0x2a; // 0010 1010b
 230:	8a e2       	ldi	r24, 0x2A	; 42
 232:	8a bf       	out	0x3a, r24	; 58
	
	SREG |= 0x80; // status Register -인터럽트 허용
 234:	8f b7       	in	r24, 0x3f	; 63
 236:	80 68       	ori	r24, 0x80	; 128
 238:	8f bf       	out	0x3f, r24	; 63
	sei(); // set interrupt - 인터럽트 시작
 23a:	78 94       	sei
	
	int t = 0;
 23c:	c0 e0       	ldi	r28, 0x00	; 0
 23e:	d0 e0       	ldi	r29, 0x00	; 0
	int tled = 100000;
	
	while (1)
	{
		switch(opmode)
 240:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 244:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 248:	00 97       	sbiw	r24, 0x00	; 0
 24a:	21 f0       	breq	.+8      	; 0x254 <main+0x36>
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	21 f4       	brne	.+8      	; 0x258 <main+0x3a>
		{
			case 0: //reset & wait
			t = 0; break;
			case 1: // counter start
			t++; break;
 250:	21 96       	adiw	r28, 0x01	; 1
 252:	02 c0       	rjmp	.+4      	; 0x258 <main+0x3a>
	while (1)
	{
		switch(opmode)
		{
			case 0: //reset & wait
			t = 0; break;
 254:	c0 e0       	ldi	r28, 0x00	; 0
 256:	d0 e0       	ldi	r29, 0x00	; 0
			t++; break;
			case 2: // count stop
			break;
			default: break;
		}
		Disp(t);
 258:	be 01       	movw	r22, r28
 25a:	0d 2e       	mov	r0, r29
 25c:	00 0c       	add	r0, r0
 25e:	88 0b       	sbc	r24, r24
 260:	99 0b       	sbc	r25, r25
 262:	63 df       	rcall	.-314    	; 0x12a <Disp>
	
		if (t > tled)
 264:	c1 3a       	cpi	r28, 0xA1	; 161
 266:	26 e8       	ldi	r18, 0x86	; 134
 268:	d2 07       	cpc	r29, r18
 26a:	54 f3       	brlt	.-44     	; 0x240 <main+0x22>
		{
			PORTA |= 0x01;	//   LED 켜기
 26c:	8b b3       	in	r24, 0x1b	; 27
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	8b bb       	out	0x1b, r24	; 27
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	99 ef       	ldi	r25, 0xF9	; 249
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	81 50       	subi	r24, 0x01	; 1
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	20 40       	sbci	r18, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x5a>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x64>
 282:	00 00       	nop
			_delay_ms(20);
			
			PORTA &= ~0X01;	//  LED 끄기
 284:	8b b3       	in	r24, 0x1b	; 27
 286:	8e 7f       	andi	r24, 0xFE	; 254
 288:	8b bb       	out	0x1b, r24	; 27
			t++;
 28a:	21 96       	adiw	r28, 0x01	; 1
 28c:	d9 cf       	rjmp	.-78     	; 0x240 <main+0x22>

0000028e <__vector_5>:
		t = 0;
	}
}

ISR(INT4_vect) // INT4 인터럽트 처리루틴 : sw1
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
	opmode++;
 29c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 2a0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
 2aa:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
	if(opmode >= OPMODEMAX)opmode = 0;
 2ae:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 2b2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 2b6:	03 97       	sbiw	r24, 0x03	; 3
 2b8:	24 f0       	brlt	.+8      	; 0x2c2 <__vector_5+0x34>
 2ba:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <opmode+0x1>
 2be:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opmode>
}
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <__vector_6>:

ISR(INT5_vect) // INT5 인터럽트 처리루틴 : sw2
{
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
	timer++;
 2de:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <timer>
 2e2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <timer+0x1>
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <timer+0x1>
 2ec:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <timer>
}
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <__vector_7>:
ISR(INT6_vect) // INT6 인터럽트 처리루틴 : sw3
{
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
	reset++;
 30c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 310:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 31a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <__udivmodsi4>:
 32c:	a1 e2       	ldi	r26, 0x21	; 33
 32e:	1a 2e       	mov	r1, r26
 330:	aa 1b       	sub	r26, r26
 332:	bb 1b       	sub	r27, r27
 334:	fd 01       	movw	r30, r26
 336:	0d c0       	rjmp	.+26     	; 0x352 <__udivmodsi4_ep>

00000338 <__udivmodsi4_loop>:
 338:	aa 1f       	adc	r26, r26
 33a:	bb 1f       	adc	r27, r27
 33c:	ee 1f       	adc	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	a2 17       	cp	r26, r18
 342:	b3 07       	cpc	r27, r19
 344:	e4 07       	cpc	r30, r20
 346:	f5 07       	cpc	r31, r21
 348:	20 f0       	brcs	.+8      	; 0x352 <__udivmodsi4_ep>
 34a:	a2 1b       	sub	r26, r18
 34c:	b3 0b       	sbc	r27, r19
 34e:	e4 0b       	sbc	r30, r20
 350:	f5 0b       	sbc	r31, r21

00000352 <__udivmodsi4_ep>:
 352:	66 1f       	adc	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	88 1f       	adc	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	1a 94       	dec	r1
 35c:	69 f7       	brne	.-38     	; 0x338 <__udivmodsi4_loop>
 35e:	60 95       	com	r22
 360:	70 95       	com	r23
 362:	80 95       	com	r24
 364:	90 95       	com	r25
 366:	9b 01       	movw	r18, r22
 368:	ac 01       	movw	r20, r24
 36a:	bd 01       	movw	r22, r26
 36c:	cf 01       	movw	r24, r30
 36e:	08 95       	ret

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
